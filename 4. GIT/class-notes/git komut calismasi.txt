
Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson (master)
$ mkdir hands_on

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson (master)
$ cd hands_on

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on (master)
$ mkdir mysecond_project

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on (master)
$ git init
Initialized empty Git repository in C:/Users/Pc/Desktop/Git_lesson/hands_on/.git/

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on (master)
$ touch file1.txt

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on (master)
$ ls
file1.txt  mysecond_project/

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on (master)
$ echo "merhaba dunya" > file1.txt

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on (master)
$ git add .
warning: LF will be replaced by CRLF in file1.txt.
The file will have its original line endings in your working directory

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on (master)
$ git status
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
        new file:   file1.txt


Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on (master)
$ git rm --cached file1.txt
rm 'file1.txt'

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on (master)
$ git status
On branch master

No commits yet

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        file1.txt

nothing added to commit but untracked files present (use "git add" to track)

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on (master)
$ git add .
warning: LF will be replaced by CRLF in file1.txt.
The file will have its original line endings in your working directory

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on (master)
$ git status
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
        new file:   file1.txt


Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on (master)
$ git commit -m "first commit"
[master (root-commit) d65ebb3] first commit
 1 file changed, 1 insertion(+)
 create mode 100644 file1.txt

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on (master)
$ echo "hello world" > file2.txt

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on (master)
$ git status
On branch master
Untracked files:
  (use "git add <file>..." to include in what will be committed)
        file2.txt

nothing added to commit but untracked files present (use "git add" to track)

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on (master)
$ git add file2.txt
warning: LF will be replaced by CRLF in file2.txt.
The file will have its original line endings in your working directory

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on (master)
$ rm file1.txt

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on (master)
$ mv file2.txt file3.txt

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on (master)
$ git status
On branch master
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        new file:   file2.txt

Changes not staged for commit:
  (use "git add/rm <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        deleted:    file1.txt
        deleted:    file2.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        file3.txt


Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on (master)
$ git commit -m "file3 created"
[master 2fe3254] file3 created
 1 file changed, 1 insertion(+)
 create mode 100644 file2.txt

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on (master)
$ git commit --amend
[master acc6c8e] file3 olusturuldu
 Date: Sun Jul 11 14:45:30 2021 +0300
 1 file changed, 1 insertion(+)
 create mode 100644 file2.txt

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on (master)
$ git log
commit acc6c8eaae3b5ce468ce2a040d33e6aeda53cfea (HEAD -> master)
Author: halit <halatsar35@gmail.com>
Date:   Sun Jul 11 14:45:30 2021 +0300

    file3 olusturuldu

commit d65ebb306f84b69bd11995e13fe44beea3e70988
Author: halit <halatsar35@gmail.com>
Date:   Sun Jul 11 14:40:37 2021 +0300

    first commit

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on (master)
$ git checkout d65ebb
Note: switching to 'd65ebb'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at d65ebb3 first commit
D       file1.txt

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on ((d65ebb3...))
$ ls
file3.txt  mysecond_project/

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on ((d65ebb3...))
$ git checkout master
Previous HEAD position was d65ebb3 first commit
Switched to branch 'master'
D       file1.txt

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on (master)
$ git log
commit acc6c8eaae3b5ce468ce2a040d33e6aeda53cfea (HEAD -> master)
Author: halit <halatsar35@gmail.com>
Date:   Sun Jul 11 14:45:30 2021 +0300

    file3 olusturuldu

commit d65ebb306f84b69bd11995e13fe44beea3e70988
Author: halit <halatsar35@gmail.com>
Date:   Sun Jul 11 14:40:37 2021 +0300

    first commit

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on (master)
$ git checkout^C

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on (master)
$ git checkout d65ebb
Note: switching to 'd65ebb'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at d65ebb3 first commit
D       file1.txt

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on ((d65ebb3...))
$ ll
total 1
-rw-r--r-- 1 Pc 197121 12 Jul 11 14:42 file3.txt
drwxr-xr-x 1 Pc 197121  0 Jul 11 14:37 mysecond_project/

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on ((d65ebb3...))
$ git log
commit d65ebb306f84b69bd11995e13fe44beea3e70988 (HEAD)
Author: halit <halatsar35@gmail.com>
Date:   Sun Jul 11 14:40:37 2021 +0300

    first commit

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on ((d65ebb3...))
$ git checkout
D       file1.txt

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on ((d65ebb3...))
$ git add .
warning: LF will be replaced by CRLF in file3.txt.
The file will have its original line endings in your working directory

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on ((d65ebb3...))
$ git commit -m "second commit"
[detached HEAD 5054ad6] second commit
 2 files changed, 1 insertion(+), 1 deletion(-)
 delete mode 100644 file1.txt
 create mode 100644 file3.txt

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on ((5054ad6...))
$ ls
file3.txt  mysecond_project/

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on ((5054ad6...))
$ git log
commit 5054ad603f57a1bc52d52fa1b94f533e6adf2f2c (HEAD)
Author: halit <halatsar35@gmail.com>
Date:   Sun Jul 11 14:56:59 2021 +0300

    second commit

commit d65ebb306f84b69bd11995e13fe44beea3e70988
Author: halit <halatsar35@gmail.com>
Date:   Sun Jul 11 14:40:37 2021 +0300

    first commit

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on ((5054ad6...))
$ git checkout d65ebb
Warning: you are leaving 1 commit behind, not connected to
any of your branches:

  5054ad6 second commit

If you want to keep it by creating a new branch, this may be a good time
to do so with:

 git branch <new-branch-name> 5054ad6

HEAD is now at d65ebb3 first commit

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on ((d65ebb3...))
$ git add .

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on ((d65ebb3...))
$ git commit -m "file3 olusturuldu"
HEAD detached at d65ebb3
nothing to commit, working tree clean

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on ((d65ebb3...))
$ ls
file1.txt  mysecond_project/

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on ((d65ebb3...))
$ echo "sakin olalim arkadaslar" > file4.txt

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on ((d65ebb3...))
$ git add .
warning: LF will be replaced by CRLF in file4.txt.
The file will have its original line endings in your working directory

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on ((d65ebb3...))
$ git commit -m "file4 olusturuldu"
[detached HEAD b515e15] file4 olusturuldu
 1 file changed, 1 insertion(+)
 create mode 100644 file4.txt

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on ((b515e15...))
$ git status
HEAD detached from d65ebb3
nothing to commit, working tree clean

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on ((b515e15...))
$ git log
commit b515e157d42c739ac8624356e136bd278ade059b (HEAD)
Author: halit <halatsar35@gmail.com>
Date:   Sun Jul 11 15:02:25 2021 +0300

    file4 olusturuldu

commit d65ebb306f84b69bd11995e13fe44beea3e70988
Author: halit <halatsar35@gmail.com>
Date:   Sun Jul 11 14:40:37 2021 +0300

    first commit

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on ((b515e15...))
$ ls
file1.txt  file4.txt  mysecond_project/

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on ((b515e15...))
$ touch file5.txt

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on ((b515e15...))
$ echo "daha yeni basliyoruz" > file5.txt

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on ((b515e15...))
$ ls
file1.txt  file4.txt  file5.txt  mysecond_project/

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on ((b515e15...))
$ git add .
warning: LF will be replaced by CRLF in file5.txt.
The file will have its original line endings in your working directory

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on ((b515e15...))
$ git commit -m "yeni dosya geldi"
[detached HEAD 37eb5ef] yeni dosya geldi
 1 file changed, 1 insertion(+)
 create mode 100644 file5.txt

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on ((37eb5ef...))
$ git status
HEAD detached from d65ebb3
nothing to commit, working tree clean

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on ((37eb5ef...))
$ git log
commit 37eb5ef780164883a949942f41eb13e3e89fd626 (HEAD)
Author: halit <halatsar35@gmail.com>
Date:   Sun Jul 11 15:05:29 2021 +0300

    yeni dosya geldi

commit b515e157d42c739ac8624356e136bd278ade059b
Author: halit <halatsar35@gmail.com>
Date:   Sun Jul 11 15:02:25 2021 +0300

    file4 olusturuldu

commit d65ebb306f84b69bd11995e13fe44beea3e70988
Author: halit <halatsar35@gmail.com>
Date:   Sun Jul 11 14:40:37 2021 +0300

    first commit

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on ((37eb5ef...))
$ echo "bir de boyle yapalim" > file6.txt

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on ((37eb5ef...))
$ git add file6.txt
warning: LF will be replaced by CRLF in file6.txt.
The file will have its original line endings in your working directory

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on ((37eb5ef...))
$ git status
HEAD detached from d65ebb3
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        new file:   file6.txt


Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on ((37eb5ef...))
$ git commit -m "simdi olacak"
[detached HEAD d2fc5c8] simdi olacak
 1 file changed, 1 insertion(+)
 create mode 100644 file6.txt

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on ((d2fc5c8...))
$ git log
commit d2fc5c8c09ed89b93f5222727c4fa1cdaac37f58 (HEAD)
Author: halit <halatsar35@gmail.com>
Date:   Sun Jul 11 15:07:39 2021 +0300

    simdi olacak

commit 37eb5ef780164883a949942f41eb13e3e89fd626
Author: halit <halatsar35@gmail.com>
Date:   Sun Jul 11 15:05:29 2021 +0300

    yeni dosya geldi

commit b515e157d42c739ac8624356e136bd278ade059b
Author: halit <halatsar35@gmail.com>
Date:   Sun Jul 11 15:02:25 2021 +0300

    file4 olusturuldu

commit d65ebb306f84b69bd11995e13fe44beea3e70988
Author: halit <halatsar35@gmail.com>
Date:   Sun Jul 11 14:40:37 2021 +0300

    first commit

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on ((d2fc5c8...))
$ git checkout 37eb5e
Warning: you are leaving 1 commit behind, not connected to
any of your branches:

  d2fc5c8 simdi olacak

If you want to keep it by creating a new branch, this may be a good time
to do so with:

 git branch <new-branch-name> d2fc5c8

HEAD is now at 37eb5ef yeni dosya geldi

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on ((37eb5ef...))
$ ls
file1.txt  file4.txt  file5.txt  mysecond_project/

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on ((37eb5ef...))
$ git log
commit 37eb5ef780164883a949942f41eb13e3e89fd626 (HEAD)
Author: halit <halatsar35@gmail.com>
Date:   Sun Jul 11 15:05:29 2021 +0300

    yeni dosya geldi

commit b515e157d42c739ac8624356e136bd278ade059b
Author: halit <halatsar35@gmail.com>
Date:   Sun Jul 11 15:02:25 2021 +0300

    file4 olusturuldu

commit d65ebb306f84b69bd11995e13fe44beea3e70988
Author: halit <halatsar35@gmail.com>
Date:   Sun Jul 11 14:40:37 2021 +0300

    first commit

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on ((37eb5ef...))
$ git checkout d2fc5
Previous HEAD position was 37eb5ef yeni dosya geldi
HEAD is now at d2fc5c8 simdi olacak

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on ((d2fc5c8...))
$ git log
commit d2fc5c8c09ed89b93f5222727c4fa1cdaac37f58 (HEAD)
Author: halit <halatsar35@gmail.com>
Date:   Sun Jul 11 15:07:39 2021 +0300

    simdi olacak

commit 37eb5ef780164883a949942f41eb13e3e89fd626
Author: halit <halatsar35@gmail.com>
Date:   Sun Jul 11 15:05:29 2021 +0300

    yeni dosya geldi

commit b515e157d42c739ac8624356e136bd278ade059b
Author: halit <halatsar35@gmail.com>
Date:   Sun Jul 11 15:02:25 2021 +0300

    file4 olusturuldu

commit d65ebb306f84b69bd11995e13fe44beea3e70988
Author: halit <halatsar35@gmail.com>
Date:   Sun Jul 11 14:40:37 2021 +0300

    first commit

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on ((d2fc5c8...))
$ git checkout b515e
Warning: you are leaving 2 commits behind, not connected to
any of your branches:

  d2fc5c8 simdi olacak
  37eb5ef yeni dosya geldi

If you want to keep them by creating a new branch, this may be a good time
to do so with:

 git branch <new-branch-name> d2fc5c8

HEAD is now at b515e15 file4 olusturuldu

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on ((b515e15...))
$ ls
file1.txt  file4.txt  mysecond_project/

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on ((b515e15...))
$ git log
commit b515e157d42c739ac8624356e136bd278ade059b (HEAD)
Author: halit <halatsar35@gmail.com>
Date:   Sun Jul 11 15:02:25 2021 +0300

    file4 olusturuldu

commit d65ebb306f84b69bd11995e13fe44beea3e70988
Author: halit <halatsar35@gmail.com>
Date:   Sun Jul 11 14:40:37 2021 +0300

    first commit

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on ((b515e15...))
$ git checkout master
Warning: you are leaving 1 commit behind, not connected to
any of your branches:

  b515e15 file4 olusturuldu

If you want to keep it by creating a new branch, this may be a good time
to do so with:

 git branch <new-branch-name> b515e15

Switched to branch 'master'

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on (master)
$ ls
file1.txt  file2.txt  mysecond_project/

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on (master)
$ git log
commit acc6c8eaae3b5ce468ce2a040d33e6aeda53cfea (HEAD -> master)
Author: halit <halatsar35@gmail.com>
Date:   Sun Jul 11 14:45:30 2021 +0300

    file3 olusturuldu

commit d65ebb306f84b69bd11995e13fe44beea3e70988
Author: halit <halatsar35@gmail.com>
Date:   Sun Jul 11 14:40:37 2021 +0300

    first commit

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on (master)
$ git log
commit acc6c8eaae3b5ce468ce2a040d33e6aeda53cfea (HEAD -> master)
Author: halit <halatsar35@gmail.com>
Date:   Sun Jul 11 14:45:30 2021 +0300

    file3 olusturuldu

commit d65ebb306f84b69bd11995e13fe44beea3e70988
Author: halit <halatsar35@gmail.com>
Date:   Sun Jul 11 14:40:37 2021 +0300

    first commit

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on (master)
$ git checkout d2fc5
Note: switching to 'd2fc5'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at d2fc5c8 simdi olacak

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on ((d2fc5c8...))
$ ls
file1.txt  file4.txt  file5.txt  file6.txt  mysecond_project/

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on ((d2fc5c8...))
$ git log
commit d2fc5c8c09ed89b93f5222727c4fa1cdaac37f58 (HEAD)
Author: halit <halatsar35@gmail.com>
Date:   Sun Jul 11 15:07:39 2021 +0300

    simdi olacak

commit 37eb5ef780164883a949942f41eb13e3e89fd626
Author: halit <halatsar35@gmail.com>
Date:   Sun Jul 11 15:05:29 2021 +0300

    yeni dosya geldi

commit b515e157d42c739ac8624356e136bd278ade059b
Author: halit <halatsar35@gmail.com>
Date:   Sun Jul 11 15:02:25 2021 +0300

    file4 olusturuldu

commit d65ebb306f84b69bd11995e13fe44beea3e70988
Author: halit <halatsar35@gmail.com>
Date:   Sun Jul 11 14:40:37 2021 +0300

    first commit

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on ((d2fc5c8...))
$ git reflog
d2fc5c8 (HEAD) HEAD@{0}: checkout: moving from master to d2fc5
acc6c8e (master) HEAD@{1}: checkout: moving from b515e157d42c739ac8624356e136bd278ar
b515e15 HEAD@{2}: checkout: moving from d2fc5c8c09ed89b93f5222727c4fa1cdaac37f58 to
d2fc5c8 (HEAD) HEAD@{3}: checkout: moving from 37eb5ef780164883a949942f41eb13e3e89f
37eb5ef HEAD@{4}: checkout: moving from d2fc5c8c09ed89b93f5222727c4fa1cdaac37f58 to
d2fc5c8 (HEAD) HEAD@{5}: commit: simdi olacak
37eb5ef HEAD@{6}: commit: yeni dosya geldi
b515e15 HEAD@{7}: commit: file4 olusturuldu
d65ebb3 HEAD@{8}: checkout: moving from 5054ad603f57a1bc52d52fa1b94f533e6adf2f2c to
5054ad6 HEAD@{9}: commit: second commit
d65ebb3 HEAD@{10}: checkout: moving from master to d65ebb
acc6c8e (master) HEAD@{11}: checkout: moving from d65ebb306f84b69bd11995e13fe44beeaer
d65ebb3 HEAD@{12}: checkout: moving from master to d65ebb
acc6c8e (master) HEAD@{13}: commit (amend): file3 olusturuldu
2fe3254 HEAD@{14}: commit: file3 created
d65ebb3 HEAD@{15}: commit (initial): first commit

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on ((d2fc5c8...))
$ git reflog
d2fc5c8 (HEAD) HEAD@{0}: checkout: moving from master to d2fc5
acc6c8e (master) HEAD@{1}: checkout: moving from b515e157d42c739ac8624356e136bd278a
b515e15 HEAD@{2}: checkout: moving from d2fc5c8c09ed89b93f5222727c4fa1cdaac37f58 to
d2fc5c8 (HEAD) HEAD@{3}: checkout: moving from 37eb5ef780164883a949942f41eb13e3e89f
37eb5ef HEAD@{4}: checkout: moving from d2fc5c8c09ed89b93f5222727c4fa1cdaac37f58 to
d2fc5c8 (HEAD) HEAD@{5}: commit: simdi olacak
37eb5ef HEAD@{6}: commit: yeni dosya geldi
b515e15 HEAD@{7}: commit: file4 olusturuldu
d65ebb3 HEAD@{8}: checkout: moving from 5054ad603f57a1bc52d52fa1b94f533e6adf2f2c to
5054ad6 HEAD@{9}: commit: second commit
d65ebb3 HEAD@{10}: checkout: moving from master to d65ebb
acc6c8e (master) HEAD@{11}: checkout: moving from d65ebb306f84b69bd11995e13fe44beea
d65ebb3 HEAD@{12}: checkout: moving from master to d65ebb
acc6c8e (master) HEAD@{13}: commit (amend): file3 olusturuldu
2fe3254 HEAD@{14}: commit: file3 created
d65ebb3 HEAD@{15}: commit (initial): first commit

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on ((d2fc5c8...))
$ git checkout d2fc5c8
HEAD is now at d2fc5c8 simdi olacak

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on ((d2fc5c8...))
$ git log
commit d2fc5c8c09ed89b93f5222727c4fa1cdaac37f58 (HEAD)
Author: halit <halatsar35@gmail.com>
Date:   Sun Jul 11 15:07:39 2021 +0300

    simdi olacak

commit 37eb5ef780164883a949942f41eb13e3e89fd626
Author: halit <halatsar35@gmail.com>
Date:   Sun Jul 11 15:05:29 2021 +0300

    yeni dosya geldi

commit b515e157d42c739ac8624356e136bd278ade059b
Author: halit <halatsar35@gmail.com>
Date:   Sun Jul 11 15:02:25 2021 +0300

    file4 olusturuldu

commit d65ebb306f84b69bd11995e13fe44beea3e70988
Author: halit <halatsar35@gmail.com>
Date:   Sun Jul 11 14:40:37 2021 +0300

    first commit

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on ((d2fc5c8...))
$ git branch
* (HEAD detached at d2fc5c8)
  master

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/hands_on ((d2fc5c8...))
$ cd ..

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson (master)
$ mkdir newbranch

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson (master)
$ cd newbranch

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/newbranch (master)
$ git init
Initialized empty Git repository in C:/Users/Pc/Desktop/Git_lesson/newbranch/.git/

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/newbranch (master)
$ touch newfile1.txt

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/newbranch (master)
$ git add .

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/newbranch (master)
$ git commit -m "first commit"
[master (root-commit) 66648a9] first commit
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 newfile1.txt

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/newbranch (master)
$ ls
newfile1.txt

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/newbranch (master)
$ git branch
* master

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/newbranch (master)
$ git branch hasbranch

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/newbranch (master)
$ git branch
  hasbranch
* master

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/newbranch (master)
$ git checkout hasbranch
Switched to branch 'hasbranch'

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/newbranch (hasbranch)
$ git branch
* hasbranch
  master

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/newbranch (hasbranch)
$ git branch -b pesbranch
error: unknown switch `b'
usage: git branch [<options>] [-r | -a] [--merged] [--no-merged]
   or: git branch [<options>] [-l] [-f] <branch-name> [<start-point>]
   or: git branch [<options>] [-r] (-d | -D) <branch-name>...
   or: git branch [<options>] (-m | -M) [<old-branch>] <new-branch>
   or: git branch [<options>] (-c | -C) [<old-branch>] <new-branch>
   or: git branch [<options>] [-r | -a] [--points-at]
   or: git branch [<options>] [-r | -a] [--format]

Generic options
    -v, --verbose         show hash and subject, give twice for upstream branch
    -q, --quiet           suppress informational messages
    -t, --track           set up tracking mode (see git-pull(1))
    -u, --set-upstream-to <upstream>
                          change the upstream info
    --unset-upstream      unset the upstream info
    --color[=<when>]      use colored output
    -r, --remotes         act on remote-tracking branches
    --contains <commit>   print only branches that contain the commit
    --no-contains <commit>
                          print only branches that don't contain the commit
    --abbrev[=<n>]        use <n> digits to display object names

Specific git-branch actions:
    -a, --all             list both remote-tracking and local branches
    -d, --delete          delete fully merged branch
    -D                    delete branch (even if not merged)
    -m, --move            move/rename a branch and its reflog
    -M                    move/rename a branch, even if target exists
    -c, --copy            copy a branch and its reflog
    -C                    copy a branch, even if target exists
    -l, --list            list branch names
    --show-current        show current branch name
    --create-reflog       create the branch's reflog
    --edit-description    edit the description for the branch
    -f, --force           force creation, move/rename, deletion
    --merged <commit>     print only branches that are merged
    --no-merged <commit>  print only branches that are not merged
    --column[=<style>]    list branches in columns
    --sort <key>          field name to sort on
    --points-at <object>  print only branches of the object
    -i, --ignore-case     sorting and filtering are case insensitive
    --format <format>     format to use for the output


Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/newbranch (hasbranch)
$ git checkout

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/newbranch (hasbranch)
$ ls
newfile1.txt

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/newbranch (hasbranch)
$ git branch
* hasbranch
  master

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/newbranch (hasbranch)
$ git branch pesbranch

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/newbranch (hasbranch)
$ git branch
* hasbranch
  master
  pesbranch

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/newbranch (hasbranch)
$ git checkout pesbranch
Switched to branch 'pesbranch'

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/newbranch (pesbranch)
$ git branch
  hasbranch
  master
* pesbranch

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/newbranch (pesbranch)
$ git checkout master
Switched to branch 'master'

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/newbranch (master)
$ git branch -d pesbranch
Deleted branch pesbranch (was 66648a9).

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/newbranch (master)
$ git branch
  hasbranch
* master

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/newbranch (master)
$ git branch -d hasbranch
Deleted branch hasbranch (was 66648a9).

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/newbranch (master)
$ git branch
* master

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/newbranch (master)
$ cd ..

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson (master)
$ mkdir conflict

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson (master)
$ cd conflict/

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/conflict (master)
$ git init
Initialized empty Git repository in C:/Users/Pc/Desktop/Git_lesson/conflict/.git/

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/conflict (master)
$ touch file1.txt file2.txt

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/conflict (master)
$ git branch

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/conflict (master)
$ git commit -m "catisma cikacak"
On branch master

Initial commit

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        file1.txt
        file2.txt

nothing added to commit but untracked files present (use "git add" to track)

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/conflict (master)
$ git add .

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/conflict (master)
$ git branch conflict
fatal: Not a valid object name: 'master'.

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/conflict (master)
$ git branch

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/conflict (master)
$ git add .

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/conflict (master)
$ git commit -m "first commit"
[master (root-commit) d46460c] first commit
 2 files changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 file1.txt
 create mode 100644 file2.txt

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/conflict (master)
$ git branch
* master

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/conflict (master)
$ git branch conflict

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/conflict (master)
$ git branch
  conflict
* master

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/conflict (master)
$ echo "hello world" > file2.txt

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/conflict (master)
$ git commit -am "first commit on a master branch"
warning: LF will be replaced by CRLF in file2.txt.
The file will have its original line endings in your working directory
[master 03576df] first commit on a master branch
 1 file changed, 1 insertion(+)

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/conflict (master)
$ git log
commit 03576df539278709836f919b43ed10137821fe48 (HEAD -> master)
Author: halit <halatsar35@gmail.com>
Date:   Sun Jul 11 17:43:08 2021 +0300

    first commit on a master branch

commit d46460c6217089dd9349afcb89765e4dae3f23b9 (conflict)
Author: halit <halatsar35@gmail.com>
Date:   Sun Jul 11 17:39:11 2021 +0300

    first commit
:...skipping...
commit 03576df539278709836f919b43ed10137821fe48 (HEAD -> master)
Author: halit <halatsar35@gmail.com>
Date:   Sun Jul 11 17:43:08 2021 +0300

    first commit on a master branch

commit d46460c6217089dd9349afcb89765e4dae3f23b9 (conflict)
Author: halit <halatsar35@gmail.com>
Date:   Sun Jul 11 17:39:11 2021 +0300

    first commit
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/conflict (master)
$ git checkout conflict
Switched to branch 'conflict'

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/conflict (conflict)
$ git log
commit d46460c6217089dd9349afcb89765e4dae3f23b9 (HEAD -> conflict)
Author: halit <halatsar35@gmail.com>
Date:   Sun Jul 11 17:39:11 2021 +0300

    first commit

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/conflict (conflict)
$ cat file2.txt

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/conflict (conflict)
$ echo "merhaba dunya" > file2.txt

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/conflict (conflict)
$ git commit -am "first commit on conflict"
warning: LF will be replaced by CRLF in file2.txt.
The file will have its original line endings in your working directory
[conflict c19bc95] first commit on conflict
 1 file changed, 1 insertion(+)

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/conflict (conflict)
$ git checkout master
Switched to branch 'master'

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/conflict (master)
$ git merge conflict
Auto-merging file2.txt
CONFLICT (content): Merge conflict in file2.txt
Automatic merge failed; fix conflicts and then commit the result.

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/conflict (master|MERGING)
$ vi file2.txt

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/conflict (master|MERGING)
$ git add .

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/conflict (master|MERGING)
$ git commit -m "catisma giderildi"
[master 9c2dd41] catisma giderildi

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/conflict (master)
$ cat file2.txt
merhaba dunya

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson/conflict (master)
$ cd ..

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson (master)
$ info history
bash: info: command not found

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson (master)
$ git history > history.txt
git: 'history' is not a git command. See 'git --help'.

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson (master)
$ git --help
usage: git [--version] [--help] [-C <path>] [-c <name>=<value>]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           [--super-prefix=<path>] [--config-env=<name>=<envvar>]
           <command> [<args>]

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone             Clone a repository into a new directory
   init              Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add               Add file contents to the index
   mv                Move or rename a file, a directory, or a symlink
   restore           Restore working tree files
   rm                Remove files from the working tree and from the index
   sparse-checkout   Initialize and modify the sparse-checkout

examine the history and state (see also: git help revisions)
   bisect            Use binary search to find the commit that introduced a bug
   diff              Show changes between commits, commit and working tree, etc
   grep              Print lines matching a pattern
   log               Show commit logs
   show              Show various types of objects
   status            Show the working tree status

grow, mark and tweak your common history
   branch            List, create, or delete branches
   commit            Record changes to the repository
   merge             Join two or more development histories together
   rebase            Reapply commits on top of another base tip
   reset             Reset current HEAD to the specified state
   switch            Switch branches
   tag               Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch             Download objects and refs from another repository
   pull              Fetch from and integrate with another repository or a local br
   push              Update remote refs along with associated objects

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.
See 'git help git' for an overview of the system.

Pc@DESKTOP-B7US2UG MINGW64 ~/Desktop/Git_lesson (master)
$
